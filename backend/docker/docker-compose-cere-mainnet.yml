version: '3.7'

services:
  #
  # SQL data base
  #
  postgres:
    image: postgres:13
    restart: always
    shm_size: 1GB
    volumes:
      - 'db-data:/var/lib/postgresql/data'
      - './sql/backend.sql:/docker-entrypoint-initdb.d/backend.sql'
    environment:
      POSTGRES_DB: 'polkastats'
      POSTGRES_USER: 'polkastats'
      POSTGRES_PASSWORD: 'polkastats'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U polkastats']
      interval: 5s
      timeout: 5s
      retries: 5
    #
    # https://pgtune.leopard.in.ua/#/
    #
    # Optimized for:
    #
    # DB Version: 13
    # OS Type: linux
    # DB Type: web
    # Total Memory (RAM): 128 GB
    # CPUs num: 12
    # Connections num: 200
    # Data Storage: ssd

    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "effective_cache_size=128MB"
      - "-c"
      - "maintenance_work_mem=2GB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=41943kB"
      - "-c"
      - "min_wal_size=2MB"
      - "-c"
      - "max_wal_size=1GB"
      - "-c"
      - "max_worker_processes=12"
      - "-c"
      - "max_parallel_workers_per_gather=4"
      - "-c"
      - "max_parallel_workers=12"
      - "-c"
      - "max_parallel_maintenance_workers=4"

  #
  # Hasura
  #
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3
    ports:
      - '8082:8080'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: 'postgres://polkastats:polkastats@postgres:5432/polkastats'
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to 'false' to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: 'startup, http-log, webhook-log, websocket-log, query-log'
      HASURA_GRAPHQL_CORS_DOMAIN: http://localhost:3000
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ADMIN_SECRET: my_admin_secret_key

  #
  # Block crawler
  #
  crawler:
    image: crawler:latest
    build:
      context: ../
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - 'postgres'
    restart: always
    environment:
      NODE_ENV: 'production'
      NODE_OPTIONS: '--max-old-space-size=8192'
      WS_PROVIDER_URL: 'wss://archive.mainnet.cere.network:9945'
      SUBSTRATE_NETWORK: 'cere'
      API_CUSTOM_TYPES: 'cere_custom_types.json'
      # RANKING_DISABLE: 'true'
      # ACTIVE_ACCOUNTS_DISABLE: 'true'
      # BLOCK_LISTENER_DISABLE: 'true'
      # BLOCK_HARVESTER_DISABLE: 'true'
      NODE_PG_FORCE_NATIVE: 'true'
      #
      #   Available modes:
      #
      #   chunks:     Process batchs of 'BLOCK_HARVESTER_CHUNK_SIZE' blocks in parallel (faster)
      #   sequential: Slower but less resource-intensive
      #
      BLOCK_HARVESTER_MODE: 'chunks'
      BLOCK_HARVESTER_CHUNK_SIZE: '10'
      BLOCK_HARVESTER_STATS_PRECISION: '2'
      LOG_LEVEL: 'debug'
      BLOCK_HARVESTER_START_DELAY_MS: '60000' # 1 min
      RANKING_START_DELAY_MS: '1800000' # 30 min
      ACTIVE_ACCOUNTS_START_DELAY_MS: '300000' # 5 min
      ACTIVE_ACCOUNTS_CHUNK_SIZE: '100'

  #
  # API
  #
  api:
    image: api:latest
    ports:
      - '8000:8000'
    build:
      context: ../../api
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
    restart: always
    environment:
      - NODE_ENV=production
      - NODE_PORT=8000
      - API_KEY=my_access_key
      - NETWORKS={"URL":"wss://archive.devnet.cere.network:9945","MNEMONICS":"","NETWORK":"DEVNET"},{"URL":"wss://archive.testnet.cere.network:9945","MNEMONICS":"","NETWORK":"TESTNET"},{"URL":"wss://archive.qanet.cere.network:9945","MNEMONICS":"","NETWORK":"QANET"}
      - MAX_BALANCE=1
      - NUMBER_OF_TOKENS_TO_SEND=10
      - REQUESTS_PER_DAY=100
      - REQUESTS_PER_IP_PER_DAY=3
      - ETHEREUM_CERE_LOCKED_ADDRESSES=["0x4a3406bEEdBA323497cb0b78c9b8273025D6Ca2c", "0x91F5f7d8A486ee532abf02E889690A639C770B3c", "0xd48B20754126dAD38DC7062303aB9b0572f9De7F", "0x28D6C0A4247ff359cc43fD14E9326EbF030AD34C", "0xEA1E345F7b3dd12cA24461F839F0083c3A547337", "0xe96625d91998c1954CF7C10911c4BF28d3e10107", "0x844195Bba29D9087b85ba4AC8eF51be69c91Ee8C", "0x6D5185fa0e358d22250aE689800E7a57d47a7e3f", "0x7764eD13EaE5BC5e440D4eb07ef5Ef4A5F7C8807", "0x865a05cd1F4A501EF482506F4C4809beD8602480", "0x4E764087B5b9F7C7F4b4009FdEd2d2d5D042A89A"]

#
# Persistent volumes
#
volumes:
  db-data: {}
